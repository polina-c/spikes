/// Signature for [Codec] lifecycle events.
typedef CodecEventCallback = void Function(Codec codec);

///
///
/// For use in Flutter tests only.
/// Do not take dependency. It will be deleted without notice.
// TODO (): remove after fixing the tests.
bool deprecatedDoNotUseWillBeRemovedWithoutNoticeLeakTrackCodec = false;

/// A handle to an image codec.
///
/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [Codec] interface, see
/// [instantiateImageCodec].
abstract class Codec {
  Codec() {
    onCreate?.call(this);
  }

  /// A callback that is invoked to report a codec creation.
  ///
  /// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
  /// than to use [onCreate] directly because [MemoryAllocations]
  /// allows multiple callbacks.
  static CodecEventCallback? onCreate;

  /// A callback that is invoked to report the codec disposal.
  ///
  /// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
  /// than to use [onDispose] directly because [MemoryAllocations]
  /// allows multiple callbacks.
  static CodecEventCallback? onDispose;

  /// Number of frames in this image.
  int get frameCount;

  /// Number of times to repeat the animation.
  ///
  /// * 0 when the animation should be played once.
  /// * -1 for infinity repetitions.
  int get repetitionCount;

  /// Fetches the next animation frame.
  ///
  /// Wraps back to the first frame after returning the last frame.
  ///
  /// The returned future can complete with an error if the decoding has failed.
  ///
  /// The caller of this method is responsible for disposing the
  /// [FrameInfo.image] on the returned object.
  Future<FrameInfo> getNextFrame();

  /// Release the resources used by this object. The object is no longer usable
  /// after this method is called.
  ///
  /// This can't be a leaf call because the native function calls Dart API
  /// (Dart_SetNativeInstanceField).
  void dispose() {
    onDispose?.call(this);
  }
}
